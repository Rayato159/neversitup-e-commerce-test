// Protobuf Version

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: modules/products/productsProto/products.proto

package neversuitup_e_commerce_test

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ProductsServices_FindOneProduct_FullMethodName = "/ProductsServices/FindOneProduct"
)

// ProductsServicesClient is the client API for ProductsServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProductsServicesClient interface {
	FindOneProduct(ctx context.Context, opts ...grpc.CallOption) (ProductsServices_FindOneProductClient, error)
}

type productsServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewProductsServicesClient(cc grpc.ClientConnInterface) ProductsServicesClient {
	return &productsServicesClient{cc}
}

func (c *productsServicesClient) FindOneProduct(ctx context.Context, opts ...grpc.CallOption) (ProductsServices_FindOneProductClient, error) {
	stream, err := c.cc.NewStream(ctx, &ProductsServices_ServiceDesc.Streams[0], ProductsServices_FindOneProduct_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &productsServicesFindOneProductClient{stream}
	return x, nil
}

type ProductsServices_FindOneProductClient interface {
	Send(*FindOneProdcutReq) error
	CloseAndRecv() (*Product, error)
	grpc.ClientStream
}

type productsServicesFindOneProductClient struct {
	grpc.ClientStream
}

func (x *productsServicesFindOneProductClient) Send(m *FindOneProdcutReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *productsServicesFindOneProductClient) CloseAndRecv() (*Product, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(Product)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProductsServicesServer is the server API for ProductsServices service.
// All implementations must embed UnimplementedProductsServicesServer
// for forward compatibility
type ProductsServicesServer interface {
	FindOneProduct(ProductsServices_FindOneProductServer) error
	mustEmbedUnimplementedProductsServicesServer()
}

// UnimplementedProductsServicesServer must be embedded to have forward compatible implementations.
type UnimplementedProductsServicesServer struct {
}

func (UnimplementedProductsServicesServer) FindOneProduct(ProductsServices_FindOneProductServer) error {
	return status.Errorf(codes.Unimplemented, "method FindOneProduct not implemented")
}
func (UnimplementedProductsServicesServer) mustEmbedUnimplementedProductsServicesServer() {}

// UnsafeProductsServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProductsServicesServer will
// result in compilation errors.
type UnsafeProductsServicesServer interface {
	mustEmbedUnimplementedProductsServicesServer()
}

func RegisterProductsServicesServer(s grpc.ServiceRegistrar, srv ProductsServicesServer) {
	s.RegisterService(&ProductsServices_ServiceDesc, srv)
}

func _ProductsServices_FindOneProduct_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ProductsServicesServer).FindOneProduct(&productsServicesFindOneProductServer{stream})
}

type ProductsServices_FindOneProductServer interface {
	SendAndClose(*Product) error
	Recv() (*FindOneProdcutReq, error)
	grpc.ServerStream
}

type productsServicesFindOneProductServer struct {
	grpc.ServerStream
}

func (x *productsServicesFindOneProductServer) SendAndClose(m *Product) error {
	return x.ServerStream.SendMsg(m)
}

func (x *productsServicesFindOneProductServer) Recv() (*FindOneProdcutReq, error) {
	m := new(FindOneProdcutReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProductsServices_ServiceDesc is the grpc.ServiceDesc for ProductsServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProductsServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ProductsServices",
	HandlerType: (*ProductsServicesServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FindOneProduct",
			Handler:       _ProductsServices_FindOneProduct_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "modules/products/productsProto/products.proto",
}
