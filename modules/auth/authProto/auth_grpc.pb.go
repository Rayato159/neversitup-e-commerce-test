// Protobuf Version

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: modules/auth/authProto/auth.proto

package neversuitup_e_commerce_test

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	AuthServices_FindAccessToken_FullMethodName = "/AuthServices/FindAccessToken"
)

// AuthServicesClient is the client API for AuthServices service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthServicesClient interface {
	FindAccessToken(ctx context.Context, in *FindAccessTokenReq, opts ...grpc.CallOption) (*FindAccessTokenRes, error)
}

type authServicesClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthServicesClient(cc grpc.ClientConnInterface) AuthServicesClient {
	return &authServicesClient{cc}
}

func (c *authServicesClient) FindAccessToken(ctx context.Context, in *FindAccessTokenReq, opts ...grpc.CallOption) (*FindAccessTokenRes, error) {
	out := new(FindAccessTokenRes)
	err := c.cc.Invoke(ctx, AuthServices_FindAccessToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServicesServer is the server API for AuthServices service.
// All implementations must embed UnimplementedAuthServicesServer
// for forward compatibility
type AuthServicesServer interface {
	FindAccessToken(context.Context, *FindAccessTokenReq) (*FindAccessTokenRes, error)
	mustEmbedUnimplementedAuthServicesServer()
}

// UnimplementedAuthServicesServer must be embedded to have forward compatible implementations.
type UnimplementedAuthServicesServer struct {
}

func (UnimplementedAuthServicesServer) FindAccessToken(context.Context, *FindAccessTokenReq) (*FindAccessTokenRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAccessToken not implemented")
}
func (UnimplementedAuthServicesServer) mustEmbedUnimplementedAuthServicesServer() {}

// UnsafeAuthServicesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServicesServer will
// result in compilation errors.
type UnsafeAuthServicesServer interface {
	mustEmbedUnimplementedAuthServicesServer()
}

func RegisterAuthServicesServer(s grpc.ServiceRegistrar, srv AuthServicesServer) {
	s.RegisterService(&AuthServices_ServiceDesc, srv)
}

func _AuthServices_FindAccessToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindAccessTokenReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServicesServer).FindAccessToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AuthServices_FindAccessToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServicesServer).FindAccessToken(ctx, req.(*FindAccessTokenReq))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthServices_ServiceDesc is the grpc.ServiceDesc for AuthServices service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthServices_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AuthServices",
	HandlerType: (*AuthServicesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindAccessToken",
			Handler:    _AuthServices_FindAccessToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "modules/auth/authProto/auth.proto",
}
